---
title: 'Efficient data manipulation with {{< fa brands r-project >}} and {{< fa brands python >}}'
author: 'Pascal Guillot & Philippe Massicotte'
date: '2024-02-05'
date-format: 'long'
institute: 'Laval University'
chalkboard:
  theme: whiteboard
format:
  revealjs:
    logo: images/logos/logo_quebec_ocean.png
    footer: '<https://pmassicotte.github.io/quebec_ocean_tidy_data_workshop/>'
    theme:
      - solarized
      - theme.scss
    fig-dpi: 300
    fig-align: center
    highlight-style: a11y
    height: 1080
    width: 1920
    slide-number: c/t
    transition: fade
    preview-links: true
    hide-inactive-cursor: true

knitr:
  opts_chunk:
    dev: 'ragg_png'
    retina: 1
    dpi: 300

execute:
  freeze: auto
  cache: true
  echo: true
  fig-width: 6
  fig-height: 4

editor: source

editor_options:
  chunk_output_type: console
---

```{r}
#| label: setup
#| cache: false
#| include: false
library(tidyverse)
library(ggpmthemes)
# library(gt)

# remotes::install_github("gadenbuie/countdown")
# library(countdown)

theme_set(theme_maven())
theme_update(
  panel.border = element_blank(),
  axis.ticks = element_blank()
)

# knitr::knit_hooks$set(optipng = knitr::hook_optipng)

# https://quarto.org/docs/presentations/revealjs/themes.html
# https://emilhvitfeldt.github.io/talk-purrr-ocrug-2023/#/creating-data.frames
# https://github.com/EmilHvitfeldt/talk-purrr-ocrug-2023/blob/main/index.qmd
```

## Who am I

:::: {.columns}

::: {.column width='40%'}

<img src="images/myname.png" width="400px"/>

<br>

::: {layout="[[1], [1,1]]"}

![](images/logos/logo_quebec_ocean.png)

![](images/logos/takuvik.svg)

![](images/logos/ulaval.svg)

:::

:::

::: {.column width='5%'}
:::

::: {.column width='55%'}

[Research assistant at Takuvik (Laval University)]{style="font-weight:bold;font-size:1.5em"}

<small>_Remote sensing, modelling, data science, data visualization, programming_</small><br>

{{< fa brands github >}} [My GitHub](https://github.com/PMassicotte){style="font-weight:bold;"}

{{< fa brands twitter >}} [Follow me on Twitter](https://twitter.com/philmassicotte){style="font-weight:bold;"}

{{< fa brands mastodon >}} [Follow me on Mastodon](https://fosstodon.org/@philmassicotte){style="font-weight:bold;"}

{{< fa link >}} [www.pmassicotte.com](https://www.pmassicotte.com){style="font-weight:bold;"}

:::
::::

## Outline

::: {.incremental .r-fit-text}

- [**Part 1 (~ 30 minutes)**]{style="font-size:1.25em"}

  - Recap of what is tidy data and why it is important.

- [**Part 2 (~ 60 minutes)**]{style="font-size:1.25em"}

  - Understand the basics of data manipulation techniques using R.

  - Learn how to manipulate and transform raw data into a format suitable for analysis using `dplyr` and `tidyr`.
    - **filtering** rows
    - **grouping**, **summarizing** / **aggregating** rows
    - **joining** data from multiple sources
    - **pivoting** data, **separating columns** into multiple columns

- [**BREAK! (30 minutes)**]{style="font-size:1.25em;"} {{< fa mug-hot >}} {{< fa cookie-bite >}}

- [**Part 3 (~ 90 minutes)**]{style="font-size:1.25em"}

  - Working on your data

:::

## Context

:::: {.columns}

::: {.column width='70%'}

<figure>
<center>
<img src="images/environmental-data-science-r4ds-general.png" alt="The expanded version of the classic Grolemund & Wickham R4DS workflow, including environmental data & sci comm bookends! Envisioned by Dr. Julia Lowndes for her useR!2019 keynote. Please cite this illustration as: Updated from Grolemund & Wickham's classis R4DS schematic, envisioned by Dr. Julia Lowndes for her 2019 useR! keynote talk and illustrated by Allison Horst." style="width:85%"/>
<figcaption>Artwork by Allison Horst</figcaption>
</center>
</figure>

:::

::: {.column width='30%'}

> [**It is often said that 80% of data analysis is spent on cleaning and preparing data.** And it's not just a first step, but it must be repeated many over the course of analysis as new problems come to light or new data is collected.]{style="font-size:0.9em;"}

:::

::::

# Manipulating data in R {background-color="#2C404A"}

## Data manipulation

There are at least two characteristics that a good data manipulation software should have:

. . .

1. **speed**: results are returned in a reasonable time

. . .

2. **elegance**: easy to use and to understand what the code is doing

. . .

> The **tidyverse** is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.

## The tidyverse

The tidyverse is a **meta package** that provides a collection of tools (across different packages) that are designed for data science.

<center>
<img src="https://tidyverse.tidyverse.org/logo.png" width="400"/>
</center>

<center>
<img src="https://dplyr.tidyverse.org/logo.png" width="200"/> <img src="https://tidyr.tidyverse.org/logo.png" width="200"/> <img src="https://readr.tidyverse.org/logo.png" width="200"/> <img src="https://readxl.tidyverse.org/logo.png" width="200"/> <img src="https://ggplot2.tidyverse.org/logo.png" width="200"/><img src="https://stringr.tidyverse.org/logo.png" width="200"/><img src="https://lubridate.tidyverse.org/logo.png" width="200"/><img src="https://purrr.tidyverse.org/logo.png" width="200"/><img src="https://forcats.tidyverse.org/logo.png" width="200"/>
</center>

## The tidyverse

The package is not included in the base installation of R.

```{r}
#| eval: false
# Install the tidyverse packages
install.packages("tidyverse")
```

```{r}
#| eval: false
# Load all the packages included in tidyverse
library(tidyverse)
```

# Importing data {background-color="#2C404A"}

## Data frames

::: {.incremental}

- **Data frames** are important objects in R which are created when reading (most) tabular text files.

- The most useful data structure for data scientists.
- They allow for efficient data manipulation:
  - Filtering
  - Summarizing
  - Aggregating
  - Joining
  - And much more!

:::

## Data frames

 <figure>
  <center>
  <img src="images/data_frame.png" alt="A data frame can be seen as an Excel tabular sheet: Lines are observations and columns are variables." style="height:600px">
  </center>
</figure>

::: {.callout-note}
A data frame can be seen as a matrix with the difference that **columns (variables) can be of different types** (numerics, dates, characters, etc.).
:::

## Importing data into data frames

- Most of the time, this is the data structure that will be created when importing data in R.

- There are many functions to import data in R using the `readr` package.

| **File format**                    | **Function**   | **Package** |
| ---------------------------------- | -------------- | ----------- |
| Comma separated values (.csv)      | `read_csv()`   | readr       |
| Other text files (.txt, .dat, ...) | `read_delim()` | readr       |
| Excel (.xls, .xlsx)                | `read_excel()` | readxl      |
| Stata                              | `read_stata()` | haven       |
| SPSS                               | `read_spss()`  | haven       |
| SAS                                | `read_sas()`   | haven       |
| Matlab file (.mat)                 | `readMat()`    | R.matlab    |

## Reading files

Functions to read files in {{< fa brands r-project >}} (using `readr`) often have the same schema:

. . .

::: {.r-fit-text}
::: {.code}

read\_\*([\"file\"]{.fragment .highlight-orange}, [\<options\>]{.fragment .highlight-pastel})

:::
:::

<br>

. . .

Examples of [\<options\>]{.background-pastel .code} can be:

- A single character used to separate fields within a record: Ex.: `","`, `";"`, `"\t"`.
- The names of the columns to read.
- The number of rows to read.

. . .

```{r}
#| eval: false
# Read the first 10 lines of 'myfile.csv'
read_csv("myfile.csv", n_max = 10)
```

## The `nycflights13` datasets

Today's data comes from the `nycflights13` R package.

::: {.incremental}

- This package contains information about all flights that departed from New York airports (i.e., **EWR**, **JFK** and **LGA**) in 2013.

- Will use a reduced version of the data set for this workshop.

- Two data frames are available:

  - `airports`: Information about each airport (name, geographical coordinates)
  - `flights`: Information about each flight (departure time, origin and destination airports)

:::

. . .

If you want to install the package and get access to all the data:

```{r}
#| eval: false
install.packages("nycflights13")
```

s

## Importing data

Let's import the airports data into a data frame named `airports`.

```{r}
airports <- read_csv("http://tinyurl.com/nyc13airports")
airports
```

## Importing data

Let's import the flights data into a data frame named `flights`.

```{r}
flights <- read_csv("http://tinyurl.com/nyc13flights")
flights
```

# Data manipulation with {dplyr} and {tidyr} {background-color="#2C404A"}

## Tidyverse

A lot of `tidyverse` functions have the same scheme: **the first argument is a data frame**:

::: {.r-fit-text}

::: {.code}

function([\<dataframe\>]{.fragment .highlight-orange}, [\<expression\>]{.fragment .highlight-pastel})

:::
:::

. . .

| **Function**         | **Definition**                                                                                                         |
| -------------------- | ---------------------------------------------------------------------------------------------------------------------- |
| `filter(df, ...)`    | Select a subset of the rows of a data frame.                                                                           |
| `arrange(df, ...)`   | Reorder rows of a data frame.                                                                                          |
| `select(df, ...)`    | Select columns of a data frame.                                                                                        |
| `mutate(df, ...)`    | Add or modify columns in a data frame.                                                                                 |
| `summarise(df, ...)` | Summarize a data frame into a single row. This function is very helpful in combination with the `group_by()` function. |
| `group_by(df, ...)`  | Group a data frame based on the specified columns.                                                                     |
| `*_join(df, ...)`    | Join/merge two data frames.                                                                                            |

: Useful functions in `dplyr` / `tidyr` {tbl-colwidths="[25,75]"}

## The `filter()` function

- The `filter()` allows you to select a subset of the rows of a data frame.

- The first argument is the name of the data frame, and the second and subsequent are filtering expressions evaluated in the context of that data frame.

<!-- <figure>
  <center>
  <img src="images/functions/filter.png" alt="The filter function" style="width:65%">
  </center>
</figure>  -->

::: fragment

::: {.r-fit-text}

::: {.code}

filter([\<dataframe\>]{.fragment .highlight-orange}, [\<logical expression\>]{.fragment .highlight-pastel})

:::
:::

:::

## The `filter()` function

Example 1: [select all flights going to the **ORD** airport]{.text-outline}

```{r}
filter(flights, dest == "ORD")
```

## The `filter()` function

Example 2: [select all flights that departed after 3 PM]{.text-outline}

```{r}
filter(flights, hour > 15)
```

## The `select()` function

- `select()` is used to extract column(s) from a data frame.

- Useful when you want to perform data analysis on specific column(s) and not the complete dataset.

::: fragment

::: {.r-fit-text}

::: {.code}

select([\<dataframe\>]{.fragment .highlight-orange}, [\<column(s)\>]{.fragment .highlight-pastel})

:::
:::

:::

## The `select()` function

Example 1: [select "**faa**" and "**name**" columns from the `airports` data frame.]{.text-outline}

::: {.columns .r-fit-text}

::: {.column width="60%"}

```{r}
airports
```

:::

::: {.column width="60%"}

```{r}
select(airports, faa, name)
```

:::

:::

## The `select()` function

You can also use `select()` to remove columns with the `-` operator.

Example 2: [select all columns from `airports` except "**faa**" and "**name**".]{.text-outline}

```{r}
select(airports, -faa, -name)
```

## The `select()` function

It is also possible to select columns using **helper functions**.

Example 3: [select "**year**", and all columns that start with "**m**" from `flights`]{.text-outline}

```{r}
select(flights, year, starts_with("m"))
```

## The `mutate()` function

- The `mutate()` function is used to add or modify existing column(s) inside a data frame.

- The function takes a data frame, and one or more expressions that add/modify columns.

::: fragment

::: {.r-fit-text}

::: {.code}

mutate([\<dataframe\>]{.fragment .highlight-orange}, [\<expression\>]{.fragment .highlight-pastel})

:::
:::

:::

## The `mutate()` function

Example 1:

[add a new column named `distance_km` which converts the `distance` column, which is the flight distance in miles, into km]{.text-outline .r-fit-text}

```{r}
#| code-line-numbers: "1-4|2|3|1-5"
mutate(
  flights,
  distance_km = distance / 0.62137
)
```

## The `mutate()` function

It is also possible to add many variables in a single operation.

```{r}
#| code-line-numbers: "3-4|1-6"
mutate(
  flights,
  distance_km = distance / 0.62137,
  distance_knot = distance / 1.15078
)
```

## The `mutate()` function

Let's create a departure time column based on the `year`, `month`, `day`, `hour` and `minute` columns, using the `make_datetime()` function from the `lubridate` package.

```{r}
flights
```

## The `mutate()` function

Let's create a departure time column based on the `year`, `month`, `day`, `hour` and `minute` columns, using the `make_datetime()` function from the `lubridate` package.

```{r, echo = c(-1, -3)}
old <- options(width = 100)
mutate(flights, departure_time = make_datetime(year, month, day, hour, minute))
options(old)
```

## A note on date time

- With `lubridate`, you can convert time zones using the `with_tz()` function.

- First, we use the `ymd_hms()` function to create date time object from a string.

  - The `tz` argument is used to specify the time zone.

```{r}
x <- ymd_hms("2024-01-23 13:58:00", tz = "UTC")
x
```

- The `with_tz()` function can be used to convert the time zone.

```{r}
with_tz(x, "America/Los_Angeles")
with_tz(x, "EST")
```

## The `summarise()` function

- The `summarise()` function allows summarising columns from a data frame.

- Compress a data frame into single values (i.e. one row).
  - Hence, you have to provide a function that will be used to calculate a certain value.

::: fragment

::: {.r-fit-text}

::: {.code}

summarise([\<dataframe\>]{.fragment .highlight-orange}, [\<expression\>]{.fragment .highlight-pastel})

:::
:::

:::

## The `summarise()` function

Example 1: [calculate the average of the `distance` column]{.text-outline}

```{r}
#| code-line-numbers: "1-4|3|1-4"
summarise(
  flights,
  average_distance = mean(distance)
)
```

## The `summarise()` function

- It can be useful to know how many observations (rows) were used to calculate the average.

- This can be done using the `n()` function.

```{r}
#| code-line-numbers: "4"
summarise(
  flights,
  average_distance = mean(distance),
  n = n()
)
```

## The `summarise()` function

It is also possible to use a summarising function **by group** using the `.by` argument.

```{r}
#| code-line-numbers: "5"
summarise(
  flights,
  average_distance = mean(distance),
  n = n(),
  .by = origin
)
```

## The `summarise()` function

Let's also calculate the minimum and maximum distance by origin airport.

```{r}
#| code-line-numbers: "1-8|3-5|1-8"
summarise(
  flights,
  average_distance = mean(distance),
  min_distance = min(distance),
  max_distance = max(distance),
  n = n(),
  .by = origin
)
```

# Joining tables {background-color="#2C404A"}

## Joining tables

- Data are rarely stored in a single data frame or a single file.

- Good database practices recommend having similar data in separate tables.

  - This is the case for the `flights` and `airports` data frames.

- Joins are used to **merge data frames** together.

::: fragment

::: {.r-fit-text}

::: {.code}

\*\_join([\<dataframe\>]{.fragment .highlight-orange}, [\<dataframe\>]{.fragment .highlight-pastel})

:::
:::

:::

## Understanding joins

<figure>
  <center>
  <img src="images/join_types.svg" alt="Ven diagrams showing the main type of SQL joins" style="width:65%">
  <figcaption>Types of equality and filtering joins</figcaption>
  </center>
</figure>

## Joining airports and flights

```{r}
head(flights)
head(airports)
```

## Joining airports and flights

If we try to left join the `flights` and `airports` data frames, we get an error because there is no common column(s) between the two data frames.

```{r}
#| error: true
left_join(flights, airports)
```

## Joining airports and flights

We can use the `dest` column from the `flights` data frame and the `faa` column from the `airports` data frame as a common key.

```{r}
left_join(flights, airports, by = join_by(dest == faa))
```

## Joining airports and flights

We can see that some of the `dest` codes are not present in the `airports` data frame. Anti-joins can be used to keep only the rows that do not match between the two data frames.

[select all `flights` that **are not present** in the `airports` table]{.text-outline}

```{r}
anti_join(flights, airports, by = join_by(dest == faa))
```

## Joining airports and flights

Filtering joins can be used to keep only the rows that match between the two data frames.

[select only the `flights` that **are present** in the `airports` table]{.text-outline}

```{r}
semi_join(flights, airports, by = join_by(dest == faa))
```

## Joining airports and flights

Full joins can be used to keep all rows from both data frames.

[join both tables and keep all the rows]{.text-outline}

```{r}
full_join(flights, airports, by = join_by(dest == faa))
```

# Tidy data {background-color="#2C404A"}

## Tidy data

- In a tidy data set, each row corresponds to an **observation** whereas each column is a **variable**.

- Tidying a dataset consists of cleaning and structuring datasets to facilitate analysis.

<center>
<img src="images/tidydata_1.jpg" width="1024px"/>
</center>

## What is a messy dataset?

<small>
[https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)
</small>

Five main common problems define a messy dataset:

1. Column headers are values, not variable names.
2. Multiple variables are stored in one column.
3. Variables are stored in both rows and columns.
4. Multiple types of observational units are stored in the same table.
5. A single observational unit is stored in multiple tables.

## Column headers are values

[The religion income dataset](https://www.pewresearch.org/religion/religious-landscape-study/) is an example of a dataset where the column headers are values, not variable names. The table below shows the first 6 rows of the dataset.

```{r}
relig_income <- read_csv("http://tinyurl.com/religionincome")
head(relig_income)
```

## Column headers are values

To fix this, we have to pivot the data frame using the `pivot_longer()` function. We have to specify the column(s) that will be used as **identifier variables** (i.e. the columns that will not be modified) and the column(s) that will be used as **measured variables** (i.e. the columns that will be modified).

::: fragment

::: {.r-fit-text}

::: {.code}

pivot_longer([\<dataframe\>]{.fragment .highlight-orange}, [\<columns to pivot\>]{.fragment .highlight-pastel})

:::
:::
:::

::: fragment

```{r}
head(relig_income)
```

:::

## Column headers are values

We can see that the `pivot_longer()` function has created two new columns: `income` and `count`.

:::: {.columns}

::: {.column width="50%"}

```{r}
relig_income_pivot <- pivot_longer(
  relig_income,
  -religion,
  names_to = "income",
  values_to = "count"
)
```

:::

::: {.column width="50%"}

```{r}
relig_income_pivot
```

:::

::::

## Multiple variables in one column

```{r}
tb <- read_csv("http://tinyurl.com/whotuber")
head(tb)
```

## Multiple variables in one column

First, we have to pivot the data frame using the `pivot_longer()`.

:::: {.columns}

::: {.column width="50%"}

```{r}
tb_pivot <- pivot_longer(
  data = tb,
  cols = !c(country, year),
  values_to = "count",
  names_to = "demo"
)
```

:::

::: {.column width="50%"}

```{r}
tb_pivot
```

:::

::::

## Multiple variables in one column

Then, we can separate the `demo` column into three columns using the `separate_wider_delim()` function.

```{r}
tb_tidy <- separate_wider_delim(
  tb_pivot,
  demo,
  delim = "_",
  names = c("case", "sex", "age_group")
)
```

## Multiple variables in one column

Note that the `separate_wider_delim()` function has created three new columns: `case`, `sex` and `age_group` and removed the `demo` column.

```{r}
tb_tidy
```

## Multiple variables in one column

We can remove NA values using the `drop_na()` function.

```{r}
tb_tidy <- drop_na(tb_tidy)
tb_tidy
```

## Tidying geographical coordinates

- Geographical coordinates are often stored as degrees, minutes and seconds (DMS) in separate columns as characters.

- Such a format makes it difficult to work with
  - ex.: coordinate system transformation, or plotting

```{r}
df <- read_csv("http://tinyurl.com/coordsdms")
df
```

- We can observe that the `lon` and `lat` columns are character vectors and that the coordinates are stored as degrees, minutes and seconds.

- Note also the characters `W` and `N` that indicate the direction of the coordinates.

## Tidying geographical coordinates

- First, we have to replace the `W` and `S` characters by `-` to indicate that the coordinates are negative.

- This can be done using the `str_replace()` function from the `stringr` package.

```{r}
#| code-line-numbers: "1-7|3-4|1-7"
df <- mutate(
  df,
  lon = str_replace(lon, "W", "-"),
  lat = str_replace(lat, "S", "-")
)

df
```

## Tidying geographical coordinates

We can now use the `separate_wider_delim()` function to separate the `lon` and `lat` columns into three columns: `deg`, `minutes` and `seconds`.

```{r}
#| code-line-numbers: "1-17|2-8|1-17"
# Separate the lon column
df <- separate_wider_delim(
  df,
  lon,
  delim = " ",
  names = c("deg", "minutes", "seconds"),
  names_sep = "_"
)

# Separate the lat column
df <- separate_wider_delim(
  df,
  lat,
  delim = " ",
  names = c("deg", "minutes", "seconds"),
  names_sep = "_"
)
```

## Tidying geographical coordinates

```{r}
df
```

## Tidying geographical coordinates

- We can now convert the `deg`, `minutes` and `seconds` columns to numeric using the `parse_number()` function from the `readr` package.

```{r}
df <- mutate(
  df,
  across(everything(), parse_number)
)

df
```

- Now that all columns are now numeric, they can be used to perform calculations.

## Tidying geographical coordinates

Finally, we can convert the coordinates to decimal degrees using the following formula:

$$
\text{decimal degrees} = \text{degrees} + \frac{\text{minutes}}{60} + \frac{\text{seconds}}{3600}
$$

```{r}
df <- mutate(
  df,
  lon = lon_deg + (lon_minutes / 60) + (lon_seconds / 3600),
  lat = lat_deg + (lat_minutes / 60) + (lat_seconds / 3600),
  .keep = "unused" # drop other columns
)

df
```

# Thank you {background-color="#2C404A"}

Questions
